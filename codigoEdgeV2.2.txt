//************************************************************************
// @author     Desktops
// @copyright  None
// @date       05.09.2023  
// @version    3.0
// @brief      Arduino Sketch
//
//************************************************************************


//************************************************************************
// Including libraries / Incluindo bibliotecas
//************************************************************************

#include "Arduino.h"
#include "WiFi.h"             // WiFi Library
#include <HTTPClient.h>
#include <Servo.h>


//************************************************************************
// Espr32 configuration / Configuração Espr32
//************************************************************************

#define APP_NAME    "IoT Tago+Wifi"
#define APP_VERSION "1.0.0"
#define SEPARATOR_LINE "****************************************************"

char wifiSsid[] = "SSID"; // Nome da rede wifi que espr32 irá se conectar
char wifiPass[] = "PASS";     // Senha da rede wifi que espr32 irá se conectar

char serverAddress[] = "https://api.tago.io/data";  // TagoIO address
char contentHeader[] = "application/json";
char tokenHeader[]   = "6ca86712-5d18-4c51-aea3-ce194f30dc2e"; // TagoIO Token
HTTPClient client;


//************************************************************************
// Maping ports and varibles / Mapeando ports e variaveis
//************************************************************************

int rpm_sensor = 5;
int trigger = 2;
int echo = 4;
int sens_agua = 13;
int servoPin = 12;
Servo motor;

unsigned long counter;
volatile int holes;
float dist;
int rpm;
int humidity;



//************************************************************************
// Initial setup / Setup inicial
//************************************************************************

void setup(){

  Serial.begin(9600);
  pinMode(rpm_sensor, INPUT);
  pinMode(trigger, OUTPUT);
  pinMode(echo,INPUT);
  pinMode(sens_agua,INPUT);
  pinMode(servoPin,OUTPUT);
  motor.attach(servoPin);
  attachInterrupt(digitalPinToInterrupt(rpm_sensor),count,FALLING); // utilizado para o realizar a contagem da rotação por   minuto
  init_wifi();
  motor.write(90); // mantem servo motor na horizontal, sensor ultrassonico estará exposto
}


//************************************************************************
// Connecting espr32 to wifi / Conectando espr32 ao wifi
//************************************************************************

void init_wifi(void) {
  Serial.println("Connecting...");
  Serial.print("SSID: ");
  Serial.println(wifiSsid);
  Serial.print("PASS: ");
  Serial.println(wifiPass);
  WiFi.begin(wifiSsid, wifiPass);
  while (WiFi.status() != WL_CONNECTED){
  delay(500);
  Serial.print(".");
}
  Serial.println("Success!!");
  Serial.println(WiFi.localIP());
}


//************************************************************************
// sending information to tago.io/ enviando informações para o tago.io
//************************************************************************

void send_dist(void){
  char anyData[30];
  char postData[300];
  char anyData1[30];
  char bAny[30];
  int statusCode=0;
  
  strcpy(postData, "{\n\t\"variable\": \"Distance\", \n\t\"value\": ");

  dtostrf(dist,6,2, anyData);
  strncat(postData, anyData, 100);
  strcpy(anyData1, ",\n\t\"unit\": \"CM\"\n\t}\n");
  strncat(postData,anyData1,100);
  Serial.println(postData);

  client.begin(serverAddress);
  client.addHeader("Content-Type", contentHeader);
  client.addHeader("Device-Token", tokenHeader);
  statusCode = client.POST(postData);
}

void send_rpm(void){
  char anyData[30];
  char postData[300];
  char anyData1[30];
  char bAny[30];
  int statusCode=0;
  
  strcpy(postData, "{\n\t\"variable\": \"FlowSpeed\", \n\t\"value\": ");
 
  dtostrf(rpm,6,2, anyData);
  strncat(postData, anyData, 100);
  strcpy(anyData1, ",\n\t\"unit\": \"RPM\"\n\t}\n");
  strncat(postData,anyData1,100);
  Serial.println(postData);

  client.begin(serverAddress);
  client.addHeader("Content-Type", contentHeader);
  client.addHeader("Device-Token", tokenHeader);
  statusCode = client.POST(postData);
}

//********************************************************************************************************
// adding to the variable holes in order to calculate rpm / adicionando a variavel holes para calcular rpm
//********************************************************************************************************

void count(){

  holes++;
}

void protection(void){
  motor.write(0); // faz com que servo fica na vertical, irá deixar sensor ultrassonico protegido
  delay(300000); //fará o sistema ficar em pausa por 5 minutos com ele totalmente fechado, assim ele estará protegido por 
  //um periodo

  //testa caso realmente esteja em situação de enchente, caso esteja ficará em loop até o sensor de umidade não estar mais 
  //submergido em água
  while(humidity>200){ 
  Serial.println
}
  motor.write(90) // volta a posição inicial após
}


//***********************************************************************************************************
// calculating rpm and distance, also calling functions / calculando rpm e distancia, tambem chamando funções
//***********************************************************************************************************

void loop(){
  humidity = analogRead(sens_agua)
  if (millis() - counter > 1000){
  rpm = (holes/12.0)*60;
  holes = 0;
  counter = millis();
}
  dist=pulseIn(echo,HIGH);
  dist = dist/58;
  send_rpm();
  send_dist();
  if (dist<=10){   //esse valor deve ser ajustado, ele será o altura limite em que o sensor vai funcionar antes de tentar se proteger
  protection();
}
  delay(5000);

}

 






